---
name: "helm-deploy-action"
description: "The deployment process for component"
inputs:
  aws_region:
    description: "The AWS region to deploy to"
    required: true
  chart_name:
    description: "The name of the chart to deploy "
    required: true
  chart_version:
    description: "The version of the chart to deploy "
    required: true
  clean_up:
    description: "Tell Helm to clean up failed deployment. Disable only while debugging deployment issue."
    required: false
    default: "true"
  cluster_name:
    description: "The name of the cluster"
    required: true
  component_name:
    description: "The name of the component being deployed, it is the helm release name;
                  it also serves as the default base name for the kubernetes namespace."
    required: true
  dry_run:
    description: "Set to true to perform a helm dry-run deployment"
    required: false
    default: "false"
  github_token:
    description: "The authentication token"
    required: true
  helm_registry:
    description: "The registry to retrieve Helm charts from"
    required: true
  namespace:
    description: "The name of the namespace to deploy to. It defaults to <purpose>-<component_name>."
    required: false
    default: ""
  purpose:
    description: "The purpose in the deployment pipeline (dev, prod, ...)"
    required: true
  timeout:
    description: "time to wait for the deployment to succeed (a Go duration, default 5m0s)"
    required: false
    default: "5m0s"
  value_file:
    description: "name of a file containing additional values for helm"
    required: false
    default: ""
  verbose:
    description: "enable verbose output"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: "Tools version"
      shell: bash
      run: |
        echo "aws"
        aws --version
        echo
        echo "helm"
        helm version
        echo
        echo "jq"
        jq --version
        echo
        echo "kubectl"
        kubectl version --client=true
    - name: "Deploying ${{ inputs.chart_name }}:${{ inputs.chart_version }} for ${{ inputs.purpose }}"
      shell: bash
      run: |
        if [ "${RUNNER_DEBUG}" == 1 ]; then
          set -xv
          readonly verbose=true
        elif [ "${{ inputs.verbose }}" = "true" ]; then
          readonly verbose=true
        fi
        set -u
        
        readonly namespace="${{ inputs.namespace && inputs.namespace || format('{0}-{1}', inputs.purpose, inputs.component_name ) }}"
        
        [ "${verbose:-false}" = "true" ] && aws sts get-caller-identity
        
        aws eks --region "${{ inputs.aws_region }}" update-kubeconfig --name "${{ inputs.cluster_name }}"
        
        echo "${{ inputs.github_token }}" | helm registry login ghcr.io -u $ --password-stdin
        
        echo "ðŸš€ðŸš€ðŸš€ Upgrading ${{ inputs.purpose }} in ${{ inputs.cluster_name }} ðŸš€ðŸš€ðŸš€"
        echo "${{ inputs.chart_name }}:${{ inputs.chart_version }}"
        echo "ðŸš€ðŸš€ðŸš€ ==================== ðŸš€ðŸš€ðŸš€"
        
        options=()
        if [ "${{ inputs.clean_up }}" = "true" ]; then
          options+=("--atomic" "--cleanup-on-fail")
        else
          options+=("--wait")
        fi
        if [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "ðŸŸ§ðŸŸ§ðŸŸ§ dry run ðŸŸ§ðŸŸ§ðŸŸ§"
          options+=("--dry-run")
        fi
        [ "${{ inputs.verbose }}" = "true" ] && options+=("--debug")
        
        values=("--values" "src/main/helm/values-${{ inputs.purpose }}.yaml")
        [ -n "${{ inputs.value_file }}" ] && [ -r "${{ inputs.value_file }}" ] && values+=("--values" "${{ inputs.value_file }}")
      
        helm upgrade --install --render-subchart-notes \
          "${options[@]}" \
          --version "${{ inputs.chart_version }}" \
          --create-namespace --namespace "${namespace}" \
          --timeout "${{ inputs.timeout }}" \
          "${values[@]}" \
          --set "global.awsRegion=${{ inputs.aws_region }}" \
          --set "global.purpose=${{ inputs.purpose }}" \
          "${{ inputs.component_name }}" "${{ inputs.helm_registry }}/${{ inputs.chart_name }}"

